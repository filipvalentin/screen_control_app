@using Microsoft.AspNetCore.SignalR.Client
@using System.Collections.Concurrent;
@using System.IO;
@using System.Text
@using System.Threading.Tasks.Dataflow;
@using static System.Diagnostics.Stopwatch;
@inject IJSRuntime JS

@if (!connected) {
	<MudContainer Class="flex-grow-1 d-flex flex-column align-center justify-center">
		<MudPaper Class="px-2 py-2" Width="30em" Elevation="2">
			<MudForm @bind-IsValid="@formSuccess" Class="gap-2">
				<MudTextField T="string" @bind-Value="hostId" Label="Host ID" Required="true"
							  RequiredError="A host ID is required!"
							  Validation="@(new Func<string, bool>(CheckNotEmpty))" />
				<MudTextField T="string" @bind-Value="passcode" Label="Passcode" Required="true"
							  RequiredError="A passcode is required!"
							  Validation="@(new Func<string, bool>(CheckNotEmpty))" />

				<MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!formSuccess)" Class="ml-auto"
						   OnClick="StartConnection">Connect</MudButton>
			</MudForm>
		</MudPaper>
	</MudContainer>
}
@if (Visible) {
	@* <MudImage ObjectFit="ObjectFit.Contain" Src="@imageSrc"></MudImage> *@
	<img src="@imageSrc" style="width: 100%; height: 100%; object-fit: contain;" />
	@* 	<canvas id="imageCanvas"></canvas> *@
}

@* <script>
window.renderImageOnCanvas = (base64ImageData) => {
	var canvas = document.getElementById('imageCanvas');
	var ctx = canvas.getContext('2d');

	var img = new Image();
	img.onload = function() {
		// Draw the image on the canvas
		ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
	};

	img.src = base64ImageData;
};
</script> *@

<script>
	window.beforeWindowUnload = function (dotNetHelper) {
		window.addEventListener("beforeunload", function (event) {
			// Call the .NET method before the window unloads
			dotNetHelper.invokeMethodAsync("OnWindowClose");
		});
	};
</script>



@code {
	[Inject] private ISnackbar Snackbar { get; set; } = null!;

	[Parameter] public CancellationTokenSource CancellationTokenSource { get; set; } = null!;
	[Parameter] public bool Visible { get; set; } = false;
	[Parameter] public string TransferTime { get; set; } = "0";
	[Parameter] public EventCallback<string> TransferTimeChanged { get; set; }
	[Parameter] public string RenderTime { get; set; } = "0";
	[Parameter] public EventCallback<string> RenderTimeChanged { get; set; }


	private bool formSuccess = false;
	private bool connected = false;

	private string hostId = "";
	private string passcode = "";

	ControlScreenComponent controlScreenComponent = null!;
	private HubConnection hubConnection = null!;

	private TaskCompletionSource<string> peerConnectionIdCompletionSource = new();
	private string peerConnectionId = "";

	private System.Diagnostics.Stopwatch TransferTimeTimer = new();

	private string imageSrc = "";
	private readonly TaskCompletionSource Initialized = new();
	private readonly BufferBlock<byte[]> FrameBuffer = new();

	private MemoryStream ChunkBuffer = new();
	private int frameChunksLeft = 0;
}

@functions {
	[JSInvokable]
	public void OnWindowClose() {
		CancellationTokenSource.Cancel();
		controlScreenComponent.Dispose();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender) {
		if (firstRender) {
			// Register the JS method that listens for beforeunload
			var dotNetRef = DotNetObjectReference.Create(this);
			await JS.InvokeVoidAsync("beforeWindowUnload", dotNetRef);
		}
	}

	public void Dispose() {
		ChunkBuffer.Dispose();
	}

	private async Task StartConnection() {
		// await InitializeSignalR();

		// await hubConnection.InvokeAsync("AnnounceControl", hostId.Trim(), passcode.Trim());

		// peerConnectionId = await peerConnectionIdCompletionSource.Task;
		// connected = true;

		// await controlScreenComponent.StartTransmission();
	}

	private async Task InitializeSignalR() {
		try {
			hubConnection = new HubConnectionBuilder()
				.WithUrl("http://localhost:5026/screenControlHub")
				.Build();

			hubConnection.Closed += async (obj) => {
				await Task.Delay(new Random().Next(0, 5) * 1000);
				try {
					await hubConnection.StartAsync();
					// this.Dispatcher.Invoke(() => UpdateConnectionStatus(true));
				}
				catch (Exception e) {
					Snackbar.Add("Couldn't reconnect: " + e.ToString(), Severity.Error);
				}
			};
			hubConnection.On<string>("FailedConnection", (message) => {
				Snackbar.Add($"Couldn't connect: {message}", Severity.Error);
			});
			hubConnection.On<string>("ReceiveConnectionToControl", (peerId) => {
				peerConnectionIdCompletionSource.SetResult(peerId);
				// this.Dispatcher.Invoke(() => UpdateConnectionStatus(true));
			});
			hubConnection.On<string>("Error", (error) => Snackbar.Add($"Protocol error: {error}"));

			await hubConnection.StartAsync();
		}
		catch (Exception ex) {
			// MessageBox.Show(ex.Message);
			Snackbar.Add($"Error: {ex.Message}", Severity.Error);

			// CancellationTokenSource.Cancel();
		}
	}

	private void SetTransferTime(long value) {
		string strvalue = value.ToString();
		if (TransferTime == strvalue)
			return;
		TransferTime = strvalue;
		TransferTimeChanged.InvokeAsync(TransferTime);
	}
	private void SetRenderTime(long value) {
		string strvalue = value.ToString();
		if (RenderTime == strvalue)
			return;
		RenderTime = strvalue;
		RenderTimeChanged.InvokeAsync(RenderTime);
	}

	protected override void OnInitialized() {
		Initialized.SetResult(); //prevents a weird bug that causes StartTransmission to be called more than once
	}

	public async Task StartTransmission() {
		await Initialized.Task;

		hubConnection.On<int, int>("AnnounceBlockFrameDownload", (int frameSize, int chunks) => {
			if (frameChunksLeft > 0) {
				Snackbar.Add("Error: out of order frame transfer", Severity.Error);
				return;
			}
			frameChunksLeft = chunks;
			ChunkBuffer.Position = 0;
			TransferTimeTimer.Restart();
			// Console.WriteLine("announced");
		});

		hubConnection.On<byte[]>("BlockFrameDownloadChunk", (byte[] chunk) => {
			ChunkBuffer.Write(chunk, 0, chunk.Length);
			frameChunksLeft--;
			if (frameChunksLeft == 0) {
				ChunkBuffer.Position = 0;
				FrameBuffer.Post(ChunkBuffer.ToArray());
				SetTransferTime(TransferTimeTimer.ElapsedMilliseconds);
			}
			// Console.WriteLine("received chunk");
		});

		// _ = Task.Factory.StartNew(RetrieveFrames, TaskCreationOptions.LongRunning);
		_ = Task.Factory.StartNew(DisplayFrames, TaskCreationOptions.LongRunning);
	}

	public class ChannelFrameRetriever(HubConnection connection, string PeerConnectionId, CancellationToken cancellationToken) {
		private readonly HubConnection Connection = connection;
		private readonly CancellationToken CancellationToken = cancellationToken;
		private readonly string PeerConnectionId = PeerConnectionId;

		public async Task<MemoryStream> RetrieveAsync() {
			var channel = await Connection.StreamAsChannelAsync<byte[]>("DownloadFrame", PeerConnectionId, CancellationToken);
			var memoryStream = new MemoryStream(); //TODO maybe a pool?
			while (await channel.WaitToReadAsync()) {
				await foreach (var chunk in channel.ReadAllAsync()) {
					memoryStream.Write(chunk, 0, chunk.Length);
				}
			}
			return memoryStream;
		}
	}

	private async Task RetrieveFrames() {
		var token = CancellationTokenSource.Token;
		var frameRetriever = new ChannelFrameRetriever(hubConnection, peerConnectionId, token);

		try {
			System.Diagnostics.Stopwatch timer = new();
			while (!token.IsCancellationRequested) {
				timer.Restart();

				using MemoryStream memoryStream = await frameRetriever.RetrieveAsync();

				if (memoryStream.Length == 0) {
					await Task.Delay(500);
					continue;
				}

				memoryStream.Position = 0;
				FrameBuffer.Post(memoryStream.ToArray());
				SetTransferTime(timer.ElapsedMilliseconds);
				// Console.WriteLine("added");
			}
		}
		catch (Exception ex) {
			Snackbar.Add("Error retrieving frame: " + ex.ToString(), Severity.Error);
		}

	}

	private async Task DisplayFrames() {
		try {
			var token = CancellationTokenSource.Token;
			System.Diagnostics.Stopwatch renderTimeTimer = new();

			while (await FrameBuffer.OutputAvailableAsync(token)) {
				renderTimeTimer.Restart();
				byte[] frame = FrameBuffer.Receive(token);
				// Console.WriteLine("frames in buffer"+FrameBuffer.Count);//always 0 frames in buffer

				// Console.WriteLine("taken");
				StringBuilder stringBuilder = new();
				stringBuilder.Append("data:image/jpeg;base64,");
				stringBuilder.Append(Convert.ToBase64String(frame));
				imageSrc = stringBuilder.ToString();//img src impl
													// await JS.InvokeVoidAsync("renderImageOnCanvas", stringBuilder.ToString()); //JS canvas impl

				SetRenderTime(renderTimeTimer.ElapsedMilliseconds);

				// StateHasChanged();
				// Console.WriteLine("set");
				// await Task.Delay(1000/24);
			}
		}
		catch (Exception e) {
			Snackbar.Add("Error rendering image: " + e.ToString(), Severity.Error);
		}
	}
	private static bool CheckNotEmpty(string id) {
		return !string.IsNullOrWhiteSpace(id);
	}
}

